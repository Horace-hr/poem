package model;

import java.util.Date;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.jfinal.plugin.ehcache.CacheKit;

import utils.DicUtil;
import model.base.BaseBuyRecord;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class BuyRecord extends BaseBuyRecord<BuyRecord> {
	public static final BuyRecord dao = new BuyRecord().dao();
	
	/*********************缓存存储*************************/
	//【缓存】查询用户是否需要付费 - 清理缓存：用户支付读书币创建记录时
	public BuyRecord findRecordInCache(String userId , String chapterId ) {
		String sql = "SELECT tbr.userId , tbr.chapterId FROM t_buy_record tbr WHERE tbr.userId = ? AND tbr.chapterId = ?  " ;
		return this.findFirstByCache(DicUtil.CACHE_BUY_RECORD, userId + chapterId  , sql , userId , chapterId  );
	}
	
	@Before(Tx.class)
	public JSONObject save(String chapters , String userId) {
		if (StrKit.isBlank(chapters)) {
			return sendErrorJson() ;
		}
		
		String[] arr = chapters.split("-") ;
		int number = Integer.parseInt(arr[0]) ;
		String novelId = arr[1] ;
		Record record = Chapter.dao.getJsonPageInCache(number, novelId).getList().get(0) ;
		int amount = record.getInt("price") ;
		String chapterId = record.getStr("id") ;
		
		BuyRecord buyRecord = this.findRecordInCache(userId, chapterId) ;
		if (null != buyRecord) {
			return sendErrorJson("您已支付过啦，不需要再支付了哦~") ;
		}
		
		buyRecord = new BuyRecord() ;
		buyRecord.setId(getIds()) ;
		buyRecord.setChapterId(chapterId) ;
		buyRecord.setAmount(amount) ;
		buyRecord.setTime(new Date()) ;
		buyRecord.setUserId(userId);
		buyRecord.save() ;
		CacheKit.remove(DicUtil.CACHE_BUY_RECORD, userId + chapterId ) ;
		
		//变更用户金币数量
		User user = User.dao.findByIdInCache(userId) ;
		user.setCoins(user.getCoins() - amount ) ;
		user.setToken(User.dao.getToken()) ;
		user.update() ;
		CacheKit.remove(DicUtil.CACHE_USER_INFO, userId) ;
		
		//增加novel和chapter的收入总数
		Novel novel = Novel.dao.findByIdInCache(novelId);
		novel.setIncome(novel.getIncome() + amount ) ;
		novel.update() ;
		Novel.dao.clearCache(novelId) ;
		
		Chapter chapter = Chapter.dao.findByIdInCache(chapterId) ;
		chapter.setIncome(chapter.getIncome() + amount ) ;
		chapter.update() ;
		CacheKit.remove(DicUtil.CACHE_CHAPTER, chapterId);
		
		return sendSuccessJson("支付成功") ;
	}
	
}
