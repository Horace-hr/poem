package model;

import java.util.Date;
import java.util.List;

import utils.DicUtil;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;

import model.base.BaseClassify;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Classify extends BaseClassify<Classify> {
	public static final Classify dao = new Classify();
	
	
	/************************缓存储存方法****************************/
	//[缓存]根据id查询分类
	public Classify findByIdInCache(String id) {
		String sql = "SELECT tc.* FROM t_classify tc WHERE id = ? " ;
		return this.findFirstByCache(DicUtil.CACHE_CLASSIFY, id, sql , id ) ;
	}
	
	//[缓存]根据id查询分类 -- 含父级的分类名称：parentName
	public Classify findWithParentInCache(String id) {
		String sql = "SELECT tc.id , tc.parentId , tc.cName , tc.orderNum , tc.childrenNum , tcs.cName AS parentName FROM t_classify tc LEFT JOIN t_classify tcs ON tcs.id = tc.parentId WHERE id = ? " ;
		return this.findFirstByCache(DicUtil.CACHE_CLASSIFY_PARENT, id, sql , id ) ;
	}
	
	//【缓存】查询所有分类的列表
	public List<Classify> listAllInCache() {
		return this.findByCache(DicUtil.CACHE_CLASSIFY_LIST, "99", "SELECT tc.* FROM t_classify tc ORDER By tc.orderNum " ) ;
	}
	
	//缓存：查询小说分类by cName -- 如果分类不存在则新建分类
	public Classify findByNameInCache(String cName , boolean needSave) {
		Classify classify = this.findFirstByCache(DicUtil.CACHE_CLASSIFY, cName, " SELECT tc.id FROM t_classify tc WHERE tc.cName = ? " , cName ) ;
		if (null == classify && needSave ) {
			classify = new Classify() ;
			classify.setId(getIds()) ;
			classify.setOrderNum(0);
			classify.setChildrenNum(0);
			classify.setCName(cName);
			classify.save() ;
		}
		return classify ;
	}
	
	
	/************************缓存清洗方法****************************/
	//保存与更新分类
	public JSONObject save(Classify classify) {
		String id = classify.getId() ;
		Classify sameName = this.findByName( classify.getCName() , classify.getId() );
		if (null != sameName) {
			return sendErrorJson("分类名称已存在");
		}
		if (StrKit.notBlank(id)) {
			classify.update();
		}else {
			id = getIds() ;
			classify.setId(id);
			classify.save();
			//给父级分类新增一个子级数量
			this.changeChildrenNum(classify.getParentId(), true);
		}
		this.clearCache(id);
		return sendSuccessJson();
	}
	
	//删除分类
	public JSONObject delete(String id) {
		//TODO 添加该分类下有小说的警示
		//给父级分类减少一个子级数量
		Classify classify = Classify.dao.findByIdInCache(id);
		this.changeChildrenNum(classify.getParentId(), false);
		//如果改分类下面有子类则一起删除
		String sql = " DELETE FROM t_classify WHERE id = ? OR parentId = ? " ;
		Db.update(sql , id , id );
		this.clearCache(id);
		return sendSuccessJson();
	}
	
	//清除缓存
	public void clearCache(String id) {
		CacheKit.remove(DicUtil.CACHE_CLASSIFY, id);
		CacheKit.remove(DicUtil.CACHE_CLASSIFY_PARENT, id);
		CacheKit.remove(DicUtil.CACHE_CLASSIFY_LIST, "99");
	}
	
	/************************其他业务类**************************/
	//操作分类的子级数量 - 父级的id
	public void changeChildrenNum(String parentId , boolean isAdded) {
		if (StrKit.isBlank(parentId)) {
			return ;
		}
		String operator = isAdded ? "+" : "-" ;
		Db.update("UPDATE t_classify SET childrenNum = childrenNum " + operator + " 1 WHERE id = ? " , parentId ) ;
	}
	
	public Classify findByName(String name , String id ) {
		if (StrKit.isBlank(id)) {
			return this.findFirst("SELECT * FROM t_classify WHERE cName = ? " , name);
		}
		return this.findFirst("SELECT * FROM t_classify WHERE cName = ? AND id != ? " , name , id );
	}
	
	public JSONObject getJsonList() {
		JSONObject jsonObject = sendSuccessJson() ;
		jsonObject.put("list", this.listAllInCache());
		return jsonObject ;
	}
	
	/**********************OLD*************************/
	
	
	
	
	
}
