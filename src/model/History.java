package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.base.BaseHistory;
import utils.DicUtil;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class History extends BaseHistory<History> {
	public static final History dao = new History().dao();
	
	/*********************缓存存储*************************/
	//【缓存】查询用户阅读记录：修改用户阅读记录时清理
	public History findRecordInCache(String userId , String novelId) {
		String sql = " SELECT th.* FROM t_history th WHERE th.userId = ? AND th.novelId = ? " ;
		return this.findFirstByCache(DicUtil.CACHE_HISTORY, userId + novelId , sql , userId , novelId );
	}
	
	public History findLastRecordInCache(String userId) {
		String sql = " SELECT tn.nName , tc.title , th.novelId , tc.number FROM t_history th LEFT JOIN t_novel tn ON tn.id = th.novelId LEFT JOIN t_chapter tc ON (tc.number = th.chapterNum AND th.novelId = tc.novelId ) WHERE th.userId = ? ORDER BY th.time DESC " ;
		return this.findFirstByCache(DicUtil.CACHE_HISTORY_LASTEST, userId , sql , userId );
	}
	
	//缓存查询小说的订阅用户
	public List<History> findfollowers(String novelId , int chapterNum) {
		String sqlString = "　SEELCT th.userId FROM t_history th JOIN t_user tu ON tu.id = th.userId WHERE th.novelId = ? AND th.chapterNum = ? AND tu.isOpen = 1 AND tu.openId IS NOT NULL  " ;
		return this.findByCache(DicUtil.CACHE_HISTORY_USERS, novelId + chapterNum , sqlString , novelId , chapterNum) ;
	}
	
	//【缓存】查询用户的书架、阅读历史列表记录 - 移动端
	public Page<Record> getPage(Integer pageNum , String userId , String isFavorite) {
		List<String> whereParams = new ArrayList<String>();
		String select = " SELECT th.time , th.novelId , th.chapterNum , tp.title ,tp.author,tp.dynasty, tp.picture " ;
		StringBuffer sBuffer = new StringBuffer(" FROM t_history th ");
		sBuffer.append(" JOIN t_poem tp ON tp.id = th.novelId ") ;
		sBuffer.append(" WHERE 1=1 ");
		this.addEqualCondition(sBuffer,  whereParams ,"th.userId", userId );
		this.addEqualCondition(sBuffer,  whereParams ,"th.isFavorite", isFavorite , "99") ;
		sBuffer.append("    ");
		return Db.paginateByCache(DicUtil.CACHE_HISTORY_LIST, pageNum + userId + isFavorite, pageNum, 10, select, sBuffer.toString() , whereParams.toArray() );
	}
	
	/*********************缓存清理*************************/
	//保存用户的阅读历史记录
	public JSONObject save(String userId , String poemId , int chapterNum ,Boolean isFavorite ) {
		System.out.println("poemId:"+poemId);
		//录入用户阅读记录
		History history  = this.findRecordInCache(userId, poemId) ;
		String id = "" ;
		if (null != history) {
			id = history.getId() ;
			//加入书架
			if (isFavorite) {
				history.setIsFavorite(isFavorite);
				Poem poem = Poem.dao.findByIdInCache(poemId);
				int collectNum = poem.getCollectNum() ;
				collectNum ++ ;
				poem.setCollectNum(collectNum) ;
				poem.update() ;
				CacheKit.remove(DicUtil.CACHE_NOVEL, poemId) ;
			}else if (history.getChapterNum() != chapterNum) {
				//阅读记录
				history.setChapterNum(chapterNum);
			}
			history.setTime(new Date()) ;
			history.update();
			//清理缓存：用户章节阅读历史记录
			CacheKit.remove(DicUtil.CACHE_HISTORY, userId + poemId) ;
		}else {
			history = new History() ;
			id = getIds() ;
			history.setId(id);
			history.setTime(new Date()) ;
			history.setUserId(userId);
			history.setNovelId(poemId);
			//加入书架
			if (isFavorite) {
				history.setIsFavorite(isFavorite);
				Poem poem = Poem.dao.findByIdInCache(poemId);
				int collectNum = poem.getCollectNum() ;
				collectNum ++ ;
				poem.setCollectNum(collectNum) ;
				poem.update() ;
				CacheKit.remove(DicUtil.CACHE_NOVEL, poemId) ;
			}
			history.setChapterNum(chapterNum);
			history.save() ;
			//加入缓存中
			CacheKit.put(DicUtil.CACHE_HISTORY, userId+poemId, history) ;
			CacheKit.remove(DicUtil.CACHE_HISTORY_USERS, history.getNovelId() + history.getChapterNum()) ;
		}
		CacheKit.remove(DicUtil.CACHE_HISTORY_LASTEST, userId);
		CacheKit.removeAll(DicUtil.CACHE_HISTORY_LIST);
		return sendSuccessJson(id) ;
	}
}
