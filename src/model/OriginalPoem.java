package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;

import model.base.BaseOriginalPoem;
import utils.DicUtil;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class OriginalPoem extends BaseOriginalPoem<OriginalPoem> {
	public static final OriginalPoem dao = new OriginalPoem().dao();
	
	/************************创建缓存****************************/
	public Page<Record> getPage(Integer pageNumber , String userId) {
		System.out.println("进入原创诗词的getPage");
		List<String> whereParams = new ArrayList<String>();
		String select = " SELECT top.* , tu.nickname" ;
		StringBuffer sBuffer = new StringBuffer() ;
		sBuffer.append(" FROM t_original_poem top ");
		sBuffer.append(" LEFT JOIN t_user tu ON tu.id = top.userId");
		sBuffer.append(" WHERE tu.id = ? ");
		//userId = "771a1887966f4bbfac6bf795dfba468b";
		whereParams.add(userId);
		sBuffer.append(" ORDER BY top.createTime DESC ");
		return Db.paginateByCache( DicUtil.CACHE_ORIGINAL_POEM , userId + pageNumber + 10 , pageNumber, 10, select, sBuffer.toString() , whereParams.toArray() ) ;
	}

	
	//【缓存】查询用户的书架、阅读历史列表记录 - 移动端
		/*public Page<Record> page(Integer pageNum , String userId , String isFavorite) {
			List<String> whereParams = new ArrayList<String>();
			String select = " SELECT th.time , th.novelId , th.chapterNum , tn.nName , tc.title , tn.pic " ;
			StringBuffer sBuffer = new StringBuffer(" FROM t_history th ");
			sBuffer.append(" JOIN t_novel tn ON tn.id = th.novelId ") ;
			sBuffer.append(" JOIN t_chapter tc ON ( tc.number = th.chapterNum AND tc.novelId = th.novelId )") ;
			sBuffer.append(" WHERE 1=1 ");
			this.addEqualCondition(sBuffer,  whereParams ,"th.userId", userId);
			this.addEqualCondition(sBuffer,  whereParams ,"th.isFavorite", isFavorite , "99") ;
			sBuffer.append(" ORDER BY th.time DESC ");
			return Db.paginateByCache(DicUtil.CACHE_HISTORY_LIST, pageNum + userId + isFavorite, pageNum, 10, select, sBuffer.toString() , whereParams.toArray() );
		}
		
	*/
	
	
	
	
	
	/************************缓存清理****************************/
	public JSONObject save( OriginalPoem originalPoem , String userId) {
		System.out.println("内容："+originalPoem.getContent());
		System.out.println("用户ID："+userId);
		if (StrKit.isBlank(originalPoem.getContent())) {
			return sendErrorJson("评论内容不能为空");
		}
		if (originalPoem.getContent().length() > 200) {
			return sendErrorJson("评论内容太长了");
		}
		originalPoem.setId(getIds());
		originalPoem.setUserId(userId);
		originalPoem.setCreateTime(new Date());
		originalPoem.save();
		//清理评论分页查询缓存
		CacheKit.removeAll(DicUtil.CACHE_ORIGINAL_POEM) ;
		
		//暂时不知道要返回什么数据
		return sendSuccessJson(originalPoem.getId());
	}
	
}
