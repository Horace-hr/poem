package model;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import model.base.BasePoem;
import utils.DicUtil;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Poem extends BasePoem<Poem> {
	public static final Poem dao = new Poem().dao();
	/*********************缓存存储*************************/
	//查询诗词集 - 分类id
	public Page<Record> getJsonPage(Integer pageNum , Integer pageSize , Map<String, String> map) {
		List<String> whereParams = new ArrayList<String>();
		String select = "SELECT tp.* , tc.cName" ;
		StringBuffer sBuffer = new StringBuffer(" FROM t_poem tp ");
		sBuffer.append(" LEFT JOIN t_classify tc ON tc.id = tp.classifyId ");
		sBuffer.append(" WHERE tp.updateTime IS NOT NULL ");
		this.addEqualCondition(sBuffer, whereParams , "", "", "");
		this.addEqualCondition(sBuffer, whereParams ,"tp.classifyId", map.get("classifyId"),"99");
		String poemTitle = map.get("nName") ;
		System.out.println("进入后台 nName="+poemTitle);
		String author = map.get("author") ;
		if (StrKit.notBlank(author)) {
			if (author.equals("王维")) {
				this.addLikeCondition(sBuffer, whereParams, "tp.author", "王维" + "") ;
			}else if (author.equals("李清照")) {
				this.addLikeCondition(sBuffer, whereParams, "tp.author", "李清照" + "") ;
			}else if (author.equals("柳永")) {
				this.addLikeCondition(sBuffer, whereParams, "tp.author", "柳永" + "") ;
			}
		}
		if (StrKit.notBlank(poemTitle)) {
			sBuffer.append(" AND ( title LIKE ? OR author LIKE ? )  ");
			whereParams.add("%" + poemTitle + "%") ;
			whereParams.add("%" + poemTitle + "%") ;
		}
		
		String isRecommend = map.get("isRecommend") ;
		if (StrKit.notBlank(isRecommend) && isRecommend.equals("10")) {
			this.addNotLessThanCondition(sBuffer, whereParams, "tp.recommendNum", isRecommend ) ;
			sBuffer.append(" ORDER BY tp.recommendNum DESC ");
		}
		
		String key = pageNum + pageNum + mapToString(map) ;
		return Db.paginateByCache(DicUtil.CACHE_PAGE_POEM, key, pageNum, pageSize, select, sBuffer.toString() , whereParams.toArray() ) ;
	}
	
	//【缓存】查询小说信息By - id 
		public Poem findByIdInCache(String id) {
			return this.findFirstByCache(DicUtil.CACHE_NOVEL, id, "SELECT tp.*,tc.cName FROM t_poem tp LEFT JOIN t_classify tc ON tc.id = tp.classifyId WHERE tp.id = ? " , id );
		}
		
		public Poem findByNameInCache(String nName) {
			return this.findFirstByCache(DicUtil.CACHE_NOVEL, nName, " SELECT tp.id FROM t_poem tp WHERE tp.title = ? " , nName ) ;
		}
	
}
