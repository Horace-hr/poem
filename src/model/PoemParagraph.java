package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.core.Controller;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;
import com.jfinal.weixin.sdk.api.TemplateData;
import com.jfinal.weixin.sdk.api.TemplateMsgApi;

import model.base.BasePoemParagraph;
import utils.DicUtil;
import utils.WebContextUtil;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class PoemParagraph extends BasePoemParagraph<PoemParagraph> {
	public static final PoemParagraph dao = new PoemParagraph().dao();
	/*********************缓存存储*************************/
	//【缓存】查询小说章节信息By - id 
	public 	PoemParagraph findByIdInCache(String id) {
		return this.findFirstByCache(DicUtil.CACHE_POEM_PARAGRAPH, id, "SELECT tpp.* , tp.title FROM t_poem_paragraph tpp LEFT JOIN t_poem tp ON tp.id = tpp.poemId WHERE tpp.id = ? " , id );
	}
	
	//【缓存】查询小说章节分页:更新、保存小说、章节信息时清理 - 仅限用于小说章节详情内容查询时使用
		public Page<Record> getJsonPageInCache(Integer pageNum , String poemId ) {
			System.out.println("pageNum"+pageNum);
			List<String> whereParams = new ArrayList<String>();
			String select = "SELECT tpp.*, tp.title " ;
			StringBuffer sBuffer = new StringBuffer(" FROM t_poem_paragraph tpp ");
			sBuffer.append(" LEFT JOIN t_poem tp ON tpp.poemId = tp.id "); 
			sBuffer.append(" WHERE 1=1 ");
			this.addEqualCondition(sBuffer, whereParams ,"tpp.poemId", poemId ) ;
			sBuffer.append(" order by orderNum ");
			return Db.paginateByCache(DicUtil.CACHE_POEM_PARAGRAPH, pageNum + poemId , pageNum, 8 , select, sBuffer.toString(), whereParams.toArray() ) ;
		}
}
