package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.base.BaseStatistic;
import utils.DateUtils;
import utils.DicUtil;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.CacheKit;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Statistic extends BaseStatistic<Statistic> {
	public static final Statistic dao = new Statistic().dao();
	public static final String UV = "uv" ;
	public static final String PV = "pv" ;
	public static final String IP = "ip" ;
	public static final String CLICKS = "clicks" ;
	public static final String REGISTERS = "registers" ;
	public static final String RECHARGERS = "rechargers" ; 
	public static final String INCOME = "income" ; 
	
	public static final String DEAULT_CHANNEL = "System" ;
	
	/******************缓存存储*******************/
	//统计uv、ip、渠道点击次数
	public void saveInCache(String userId , String ip , String channelId) {
		Date now = new Date() ;
		String date = DateUtils.getCurrentDate(now) ;
		channelId = Channel.dao.filterChannelId(channelId);
		channelId = StrKit.isBlank(channelId) ? Statistic.DEAULT_CHANNEL : channelId ;
		Map<String, Integer> cacheMaps = CacheKit.get(DicUtil.CACHE_STATISTIC, channelId) ;
		if (null == cacheMaps) {
			cacheMaps = new HashMap<String, Integer>() ;
		}
		//查询当前用户id，在当前日期是否已经统计过uv
		if (StrKit.notBlank(userId)) {
			ViewUser viewUser = ViewUser.dao.findRecordInCache(userId, date) ;
			if (null == viewUser) {
				cacheMaps.put( Statistic.UV , getIntValue(cacheMaps , Statistic.UV) + 1 ) ;
				ViewUser.dao.saveRecord(userId, date) ;

			}
		}
		//查询当前用户ip，在当前日期是否已经统计过ip
		if (StrKit.notBlank(ip)) {
			ViewUser viewUser = ViewUser.dao.findRecordInCache(ip, date) ;
			if (null == viewUser) {
				cacheMaps.put( Statistic.IP , getIntValue(cacheMaps , Statistic.IP) + 1 ) ;
				ViewUser.dao.saveRecord(ip, date) ;
			}
		}
		//统计渠道点击次数
		if (!"System".equals(channelId)) {
			cacheMaps.put( Statistic.CLICKS , getIntValue(cacheMaps , Statistic.CLICKS) + 1 ) ;
		}
		//存入缓存
		CacheKit.put(DicUtil.CACHE_STATISTIC, channelId, cacheMaps ) ;
	}
	
	//新创建用户，统计渠道的新增用户 - 是否归属于该渠道，需要在新建用户时判断
	public void saveInCache(String channelId) {
		channelId = StrKit.isBlank(channelId) ? Statistic.DEAULT_CHANNEL : channelId ;
		Map<String, Integer> cacheMaps = CacheKit.get(DicUtil.CACHE_STATISTIC, channelId) ;
		if (null == cacheMaps) {
			cacheMaps = new HashMap<String, Integer>() ;
		}
		cacheMaps.put(Statistic.REGISTERS, getIntValue(cacheMaps , Statistic.REGISTERS) + 1 ) ;
		CacheKit.put(DicUtil.CACHE_STATISTIC, channelId, cacheMaps) ;
	}
	
	//新增充值记录时，统计充值用户数量和充值金额 - 需要统计算不算这个渠道的
	public void saveInCache(String channelId , int amount , String userId) {
		channelId = StrKit.isBlank(channelId) ? Statistic.DEAULT_CHANNEL : channelId ;
		Map<String, Integer> cacheMaps = CacheKit.get(DicUtil.CACHE_STATISTIC, channelId) ;
		if (null == cacheMaps) {
			cacheMaps = new HashMap<String, Integer>() ;
		}
		if (Recharge.dao.notRechargedToday(userId)) {
			cacheMaps.put(Statistic.RECHARGERS, getIntValue(cacheMaps , Statistic.RECHARGERS) + 1 ) ;
		}
		cacheMaps.put(Statistic.INCOME, getIntValue(cacheMaps , Statistic.INCOME) + amount ) ;
		CacheKit.put(DicUtil.CACHE_STATISTIC , channelId, cacheMaps) ;
	}
	
	//保存PV
	public JSONObject savePvInCache(String userId) {
		String channelId = "" ;
		User user = User.dao.findByIdInCache(userId) ;
		if (null != user) {
			channelId = StrKit.isBlank(user.getChannelId()) ? Statistic.DEAULT_CHANNEL : user.getChannelId() ;
		}
		Map<String, Integer> cacheMaps = CacheKit.get(DicUtil.CACHE_STATISTIC, channelId) ;
		if (null == cacheMaps) {
			cacheMaps = new HashMap<String, Integer>() ;
		}
		cacheMaps.put(Statistic.PV, getIntValue(cacheMaps , Statistic.PV) + 1 ) ;
		CacheKit.put(DicUtil.CACHE_STATISTIC, channelId, cacheMaps);
		return sendSuccessJson() ;
	}
	
	//查询该渠道的记录
	public Statistic findRecordInCache(String channelId , String date , String hours) {
		String sqlString = "SELECT * FROM t_statistic WHERE channelId = ? AND date = ? AND hour = ? " ;
		
		return this.findFirstByCache(DicUtil.CACHE_STATISTIC_INFO, channelId + date + hours, sqlString , channelId , date , hours ) ;
	}
	
	//查询最近一周数据统计
	public Page<Record> getPage(Integer pageNum , int pageSize) {
		String select = "SELECT ts.date , SUM(IFNULL(ts.income,0)) AS income , SUM(IFNULL(ts.clicks,0)) AS clicks , SUM(IFNULL(ts.registers,0)) AS registers , SUM(IFNULL(ts.rechargers,0)) AS rechargers , SUM(IFNULL(ts.pv,0)) AS pv  " ;
		StringBuffer sBuffer = new StringBuffer(" FROM t_statistic ts ");
		sBuffer.append(" WHERE ts.date > ? ") ;
		sBuffer.append(" GROUP BY ts.date ORDER BY ts.date DESC ") ;
		String date = DateUtils.getLastSevenDay() ; //最近7天
		return Db.paginate(pageNum, pageSize, select, sBuffer.toString() , date ) ;
	}
	
	//查询指定日期的统计数据
	public Record getRecord(String date) {
		StringBuffer sBuffer = new StringBuffer(" SELECT SUM(IFNULL(ts.income,0)) AS income , SUM(IFNULL(ts.clicks,0)) AS clicks , SUM(IFNULL(ts.registers,0)) AS registers ,  SUM(IFNULL(ts.pv,0)) AS pv  " );
		sBuffer.append(" FROM t_statistic ts WHERE date = ? ") ;
		Record record = Db.findFirst(sBuffer.toString() , date ) ;
		if (null != record ) {
			return record ;
		}
		record = new Record() ;
		record.set("income", 0) ;
		record.set("clicks", 0);
		record.set("registers", 0);
		record.set("pv", 0) ;
		return record ;
	}
	
	//查询指定日期的明细统计数据
	public List<Record> getRecordList(String date) {
		String select = " SELECT SUM(IFNULL(ts.income,0)) AS income , SUM(IFNULL(ts.clicks,0)) AS clicks , SUM(IFNULL(ts.registers,0)) AS registers , SUM(IFNULL(ts.rechargers,0)) AS rechargers , SUM(IFNULL(ts.pv,0)) AS pv  FROM t_statistic ts WHERE date = ? GROUP BY ts.hour ORDER BY ts.hour "  ;
		return Db.find(select , date ) ;
	}
	
	/******************缓存清理*******************/
	public void saveAll() {
		Date now = new Date() ;
		String date = DateUtils.getCurrentDate(now) ;
		String hours = DateUtils.getCurrentHours(now) ;
		List<String> keys = CacheKit.getKeys(DicUtil.CACHE_STATISTIC) ;
		if (keys.size() == 0) {
			Statistic statistic = this.findRecordInCache(Statistic.DEAULT_CHANNEL, date, hours) ;
			if (null == statistic) {
				statistic = new Statistic() ;
				statistic.set("date", date) ;
				statistic.set("hour", hours);
				statistic.setChannelId(Statistic.DEAULT_CHANNEL) ;
				statistic.save() ;
			}
			return ;
		}
		
		for (String channelId : keys) {
			Statistic statistic = this.findRecordInCache(channelId, date, hours) ;
			Map<String, Integer> cacheMap = CacheKit.get(DicUtil.CACHE_STATISTIC, channelId) ;
			CacheKit.remove(DicUtil.CACHE_STATISTIC, channelId);
			if (null == cacheMap) {
				continue ;
			}
			if (null == statistic) {
				statistic = new Statistic() ;
				statistic.setClicks( getIntValue(cacheMap , Statistic.CLICKS) );
				statistic.setIncome( getIntValue(cacheMap , Statistic.INCOME) ) ;
				statistic.setIp( getIntValue(cacheMap , Statistic.IP)  ) ;
				statistic.setRechargers( getIntValue(cacheMap , Statistic.RECHARGERS) ) ;
				statistic.setRegisters( getIntValue(cacheMap , Statistic.REGISTERS) ) ;
				statistic.setPv( getIntValue(cacheMap , Statistic.PV) ) ;
				statistic.setUv( getIntValue(cacheMap , Statistic.UV) ) ;
				statistic.set("date", date) ;
				statistic.set("hour", hours) ;
				statistic.setChannelId(channelId) ;
				statistic.save() ;
			}else {
				statistic.setClicks( getIntValue(cacheMap , Statistic.CLICKS)   + getIntValue(statistic.getClicks()) );
				statistic.setIncome( getIntValue(cacheMap , Statistic.INCOME)  + getIntValue(statistic.getIncome()) ) ;
				statistic.setIp( getIntValue(cacheMap , Statistic.IP) + getIntValue(statistic.getIp()) ) ;
				statistic.setRechargers( getIntValue(cacheMap , Statistic.RECHARGERS) + getIntValue(statistic.getRechargers()) ) ;
				statistic.setRegisters( getIntValue(cacheMap , Statistic.REGISTERS) + getIntValue(statistic.getRegisters()) ) ;
				statistic.setPv( getIntValue(cacheMap , Statistic.PV) + getIntValue(statistic.getPv()) ) ;
				statistic.setUv( getIntValue(cacheMap , Statistic.UV) + getIntValue(statistic.getUv()) ) ;
				statistic.update() ;
			}
		} 
		
	}
	
	
	/*************************普通业务*******************************/
	public void initData() {
		String date = DateUtils.getCurrentDate(new Date()) ;
		for (int i = 0; i < 24; i++) {
			Statistic statistic = this.findRecordInCache(Statistic.DEAULT_CHANNEL, date, i+"") ;
			if (null == statistic) {
				statistic = new Statistic() ;
				statistic.set("date", date) ;
				statistic.set("hour", i);
				statistic.setChannelId(Statistic.DEAULT_CHANNEL) ;
				statistic.save() ;
			}
		}
		date = DateUtils.getYesterdayDate() ;
		for (int i = 0; i < 24; i++) {
			Statistic statistic = this.findRecordInCache(Statistic.DEAULT_CHANNEL, date, i+"") ;
			if (null == statistic) {
				statistic = new Statistic() ;
				statistic.set("date", date) ;
				statistic.set("hour", i);
				statistic.setChannelId(Statistic.DEAULT_CHANNEL) ;
				statistic.save() ;
			}
		}
		
	}
	
}
