package model;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.base.BaseUser;
import utils.DicUtil;
import utils.EmojiFilter;
import utils.IpUtil;
import utils.MD5;

import com.alibaba.fastjson.JSONObject;
import com.jfinal.core.Controller;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.CacheKit;
import com.jfinal.weixin.sdk.kit.IpKit;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User();
	
	public static final String RANDOM_STRING = "CAVENOS20170202" ;
	
	/*********************TOKEN*************************/
	public String getToken(User user) {
		return MD5.md5(user.getId() + user.getChannelId() + user.getCoins() + user.getScore() + user.getIsNew() + User.RANDOM_STRING);
	}
	
	public boolean checkToken(User user) {
		if (StrKit.isBlank(user.getToken())) {
			return true ;
		}
		return user.getToken().equals(this.getToken(user)) ;
	}
	
	/*********************缓存存储*************************/
	
	//用户+100书币
	public void updateById(String id,int coins) {
		User user = this.findByIdInCache(id) ;
		user.setId(id);
		user.setFocus(2);
		user.setCoins(coins+100);
		CacheKit.remove(DicUtil.CACHE_USER_INFO, id) ;
		user.setToken(user.getToken(user)) ;
		user.update();
	}
	
	//查询用户信息
	public User findByIdInCache(String id) {
		String sqlString = "SELECT tu.* FROM t_user tu WHERE tu.id = ? " ;
		return this.findFirstByCache(DicUtil.CACHE_USER_INFO, id, sqlString, id);
	}
	
	//查询用户信息by openid
	public User findByOpenIdInCache(String openId) {
		String sqlString = "SELECT tu.* FROM t_user tu WHERE tu.openId = ? " ;
		return this.findFirstByCache(DicUtil.CACHE_USER_INFO, openId, sqlString, openId );
	}
	
	/*********************缓存清理*************************/
	
	//领取新手礼包
	public JSONObject changeNewUserStatus(String userId) {
		User user = this.findByIdInCache(userId) ;
		if (null == user) {
			return sendErrorJson() ;
		}
		if (!user.getIsNew()) {
			return sendErrorJson("您已领取过了新手礼包啦~");
		}
		user.setIsNew(false);
		user.setCoins(user.getCoins() + 100 );
		user.setToken(user.getToken(user)) ;
		user.update();
		CacheKit.remove(DicUtil.CACHE_USER_INFO, userId) ;
		return sendSuccessJson("100个读书币已收入囊中~") ;
	}
	
	//积分兑换金币
	public JSONObject exchangeCoins(String userId) {
		User user = this.findByIdInCache(userId);
		int score = user.getScore();
		if (score < 10 ) {
			return sendErrorJson("积分太少啦，不小于10积分才可以兑换哦");
		}
		int coins = (int) Math.floor(score/10) ;
		int ownScore = score - (coins*10) ;
		user.setCoins(user.getCoins() + coins ) ;
		user.setScore( ownScore );
		user.setToken(this.getToken(user)) ;
		user.update() ;
		CacheKit.remove(DicUtil.CACHE_USER_INFO, userId);
		return sendSuccessJson("共兑换了" + coins + "个读书币") ;
	}
	
	//用户如果充值过，永不更改渠道；如果没有充值过，则归于新渠道
	public User saveChannel(String userId , String channelId , String novelId , int number ) {
		channelId = Channel.dao.filterChannelId(channelId) ;
		User user = this.findByIdInCache(userId);
		Channel.dao.save(channelId , novelId , number );
		
		if (  null == user || StrKit.isBlank(channelId) || null != Recharge.dao.findRecord(userId)  || channelId.equals(user.getChannelId())) {
			return user ;
		}
		user.setChannelId(channelId);
		user.setToken(User.dao.getToken(user));
		user.update();
		CacheKit.remove(DicUtil.CACHE_USER_INFO, userId);
		//统计渠道新建用户数据
		Statistic.dao.saveInCache(channelId) ;
		return user ;
	}
	
	//初次获取用户信息
	public void save( String openId , String channelId , Controller con) {
		channelId = Channel.dao.filterChannelId(channelId) ;
		//查询该openid是否已经存在于用户数据之中
		if (StrKit.isBlank(openId)) {
			return ;
		}
		User exsitedUser = this.findByOpenIdInCache(openId);
		
		if (null != exsitedUser) {
			System.out.println("用户昵称1："+exsitedUser.getNickname());
			System.out.println("用户头像1："+exsitedUser.getPhoto());
			//设置渠道
			if (StrKit.notBlank(channelId) && null == Recharge.dao.findRecord(exsitedUser.getId()) && !channelId.equals(exsitedUser.getChannelId()) ) {
				exsitedUser.setChannelId(channelId);
				exsitedUser.setToken(User.dao.getToken(exsitedUser));
				//统计渠道新建用户数据
				Statistic.dao.saveInCache(channelId) ;
			}
			exsitedUser.update() ;
			con.setCookie("cid", exsitedUser.getId(), 30*24*60*60) ;
			//对缓存进行更新
			CacheKit.remove(DicUtil.CACHE_USER_INFO, exsitedUser.getId());
			CacheKit.remove(DicUtil.CACHE_USER_INFO, exsitedUser.getOpenId());
		}else{
			String ip = IpKit.getRealIp(con.getRequest()) ;
			if (StrKit.isBlank(ip)) {
	            ip = "127.0.0.1";
	        }
	        ip = ip.replace("，", ",") ;
	        if (ip.indexOf(",") != -1) {
				ip = ip.split(",")[0] ;
			}
			User user = new User() ;
			String id = getIds() ;
			user.setIp(ip) ;
			JSONObject data = IpUtil.parsing(ip) ;
			if (null != data) {
				user.setProvince(data.getString("region"));
				user.setCity(data.getString("city")) ;
			}
			if (null != channelId && channelId.length()==9) {
				user.setBlogerId(Integer.valueOf(channelId.substring(0, 5)));
			}
			System.out.println("用户昵称2："+data.getString("nickname"));
			System.out.println("用户头像2："+data.getString("photo"));
			
			user.setId(id);
			user.setRegistTime(new Date()) ;
			user.setIsNew(true) ;
			user.setIsRecharged(false);
			user.setOpenId(openId);
			user.setNickname(getNickname()) ;
			user.setCoins(0);
			user.setScore(0) ;
			//设置渠道
			if (StrKit.notBlank(channelId)) {
				user.setChannelId(channelId);
			}
			user.setToken(User.dao.getToken(user));
			user.save() ;
			con.setCookie("cid", id , 30*24*60*60) ;
			//统计渠道新建用户数据
			Statistic.dao.saveInCache(channelId) ;
		}
	}
	
	public void save( JSONObject userJson , Controller con ) {
		String openId = userJson.getString("openid") ;
		//查询该openid是否已经存在于用户数据之中
		User exsitedUser = this.findByOpenIdInCache(openId);
		if (null != exsitedUser) {
			//对该用户信息进行升级，并更新cookie中的id
			exsitedUser.setPhoto(userJson.getString("headimgurl"));
			System.out.println("头像三："+userJson.getString("headimgurl"));
			exsitedUser.setNickname(EmojiFilter.filterEmoji(userJson.getString("nickname")));
			exsitedUser.setSex(userJson.getString("sex"));
			exsitedUser.setProvince(userJson.getString("province"));
			exsitedUser.setCity(userJson.getString("city"));
			if (null == exsitedUser.getCoins()) {
				exsitedUser.setCoins(0);
			}
			if (null == exsitedUser.getScore()) {
				exsitedUser.setScore(0) ;
			}
			exsitedUser.setGetInfoTime(new Date()) ;
			exsitedUser.update() ;
			con.removeCookie("cid") ;
			con.setCookie("cid", exsitedUser.getId(), 30*24*60*60) ;
			//对缓存进行更新
			CacheKit.remove(DicUtil.CACHE_USER_INFO, userJson.getString("id") );
			CacheKit.remove(DicUtil.CACHE_USER_INFO, exsitedUser.getId());
			CacheKit.remove(DicUtil.CACHE_USER_INFO, exsitedUser.getOpenId());
		}else{
			String id = userJson.getString("id") ;
			User user = User.dao.findByIdInCache(id) ;
			if (null == user) {
				user = new User() ;
				user.setId(userJson.getString("id"));
				user.setPhoto(userJson.getString("headimgurl"));
				user.setNickname(EmojiFilter.filterEmoji(userJson.getString("nickname")));
				user.setProvince(userJson.getString("province"));
				user.setCity(userJson.getString("city"));
				user.setOpenId(openId);
				user.setSex(userJson.getString("sex"));
				user.setGetInfoTime(new Date()) ;
				if (null == user.getCoins()) {
					user.setCoins(0);
				}
				if (null == user.getScore()) {
					user.setScore(0) ;
				}
				user.setIsNew(true) ;
				user.setToken(User.dao.getToken(user)) ;
				user.save() ;
			}else {
				user.setGetInfoTime(new Date()) ;
				user.setPhoto(userJson.getString("headimgurl"));
				user.setNickname(EmojiFilter.filterEmoji(userJson.getString("nickname")));
				user.setProvince(userJson.getString("province"));
				user.setCity(userJson.getString("city"));
				user.setOpenId(openId);
				user.setSex(userJson.getString("sex"));
				if (null == user.getCoins()) {
					user.setCoins(0);
				}
				if (null == user.getScore()) {
					user.setScore(0) ;
				}
				user.setToken(User.dao.getToken(user)) ;
				user.update() ;
			}
			CacheKit.remove(DicUtil.CACHE_USER_INFO, user.getId());
			CacheKit.remove(DicUtil.CACHE_USER_INFO, user.getOpenId());
		}
	}
	
	/*********************普通业务*************************/
	//查询用户信息是否已经保存，否则创建用户信息
	public User checkUser(String userId , String ip , String channelId) {
		User user = this.findByIdInCache(userId);
		if (null == user) {
			user = new User() ;
			user.setIp(ip);
			JSONObject data = IpUtil.parsing(ip) ;
			if (null != data) {
				user.setProvince(data.getString("region"));
				user.setCity(data.getString("city")) ;
			}
			user.setId(userId);
			user.setRegistTime(new Date()) ;
			user.setCoins(0);
			user.setScore(0) ;
			channelId = Channel.dao.filterChannelId(channelId) ;
			System.out.println("channelId="+channelId);
			if (null != channelId && channelId.length()==9) {
				user.setBlogerId(Integer.valueOf(channelId.substring(0, 5)));
			}
			user.setChannelId(channelId);
			user.setNickname(getNickname());
			user.setIsNew(false);
			user.setToken(this.getToken(user)) ;
			user.save() ;
			//统计渠道新建用户数据
			Statistic.dao.saveInCache(channelId) ;
		}
		return user ;
	}
	
	public User checkUser(String userId , String channelId ,  String novelId , int number , String ip) {
		User user = this.findByIdInCache(userId);
		if (null == user) {
			user = new User() ;
			user.setIp(ip);
			JSONObject data = IpUtil.parsing(ip) ;
			if (null != data) {
				user.setProvince(data.getString("region"));
				user.setCity(data.getString("city")) ;
			}
			user.setId(userId);
			//过滤channelId
			channelId = Channel.dao.filterChannelId(channelId) ;
			user.setChannelId(channelId);
			user.setRegistTime(new Date()) ;
			user.setCoins(0);
			user.setScore(0) ;
			user.setNickname(getNickname());
			user.setIsNew(false); //用户从外部浏览器进入，没有新手礼包
			user.setToken(this.getToken(user)) ;
			user.save() ;
			Channel.dao.save(channelId, novelId, number) ;
			//统计渠道新建用户数据
			Statistic.dao.saveInCache(channelId) ;
		}
		return user ;
	}
	
	public boolean overdue(User user) {
		if (null == user) {
			return true ;
		}
		Date date = user.getGetInfoTime() ;
		if (null == date) {
			return true  ;
		}
		Calendar calendar = Calendar.getInstance() ;
		calendar.add(Calendar.DATE , -3 ) ;
		calendar.getTime() ;
		return calendar.getTime().getTime() >= date.getTime() ;
	}
	
	public Page<User> getPage(Integer pageNumber , Map<String, String> map) {
		List<String> whereParams = new ArrayList<String>() ;
		String select = "SELECT tu.*   , tc.cName , SUM(IFNULL(tr.amount , 0)) AS rechargeAmount " ;
		StringBuffer sBuffer = new StringBuffer(" FROM t_user tu ") ;
		sBuffer.append(" LEFT JOIN t_channel tc ON tc.id = tu.channelId ") ;
		sBuffer.append(" LEFT JOIN t_recharge tr ON tr.userId = tu.id AND tr.status = 1 ");
		sBuffer.append(" WHERE 1=1 ") ;
		this.addLikeCondition(sBuffer, whereParams, "tu.nickname", map.get("nickname")) ;
		this.addLikeCondition(sBuffer, whereParams, "tc.cName", map.get("cName")) ;
		sBuffer.append(" GROUP BY tu.id ORDER BY tu.registTime DESC ") ;
		return this.paginate(pageNumber, 10, select, sBuffer.toString() , whereParams.toArray() ) ;
	}
	
	public String getNickname() {
		return "读者"+new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + (int)(Math.random()*90 + 10) ;
	}
	
}


